-- 1. CREACIÓN DE LA BASE DE DATOS
CREATE DATABASE IF NOT EXISTS BD_Proyecto_Replica;
USE BD_Proyecto_Replica;

-- Creación de la tabla de usuarios
CREATE TABLE `usuarios`(
    `id_usuario` INT NOT NULL AUTO_INCREMENT,
    `nombre` VARCHAR(25) NOT NULL,
    `apellido` VARCHAR(25),
    `fecha_registro` DATE NOT NULL,
    PRIMARY KEY (`id_usuario`)
);

-- Creación de la tabla de mensajes
CREATE TABLE `mensajes` (
    `id_mensaje` INT NOT NULL AUTO_INCREMENT,
    `id_emisor` INT NOT NULL,
    `id_receptor` INT NOT NULL,
    `contenido` BLOB NOT NULL, -- BLOB para almacenar los datos encriptados
    `fecha_hora_envio` DATETIME NOT NULL,
    PRIMARY KEY (`id_mensaje`),
    FOREIGN KEY (`id_emisor`) REFERENCES `usuarios`(`id_usuario`),
    FOREIGN KEY (`id_receptor`) REFERENCES `usuarios`(`id_usuario`)
);

-- Creación de la tabla de correos
CREATE TABLE `correos` (
    `id_correo` INT NOT NULL AUTO_INCREMENT,
    `correo` VARCHAR(70) NOT NULL UNIQUE,
    `contrasenna` BLOB NOT NULL, -- BLOB para la contraseña encriptada
    `id_usuario` INT NOT NULL,
    PRIMARY KEY (`id_correo`),
    FOREIGN KEY (`id_usuario`) REFERENCES `usuarios`(`id_usuario`)
);

-- Creación de la tabla de teléfonos
CREATE TABLE `telefonos` (
    `id_telefono` INT NOT NULL AUTO_INCREMENT,
    `telefono` VARCHAR(20) NOT NULL UNIQUE,
    `id_usuario` INT NOT NULL,
    PRIMARY KEY (`id_telefono`),
    FOREIGN KEY (`id_usuario`) REFERENCES `usuarios`(`id_usuario`)
);

-- Creación de la tabla de contactos
CREATE TABLE `contactos_guardados` (
    `id_usuario` INT NOT NULL,
    `id_contacto_guardado` INT NOT NULL,
    PRIMARY KEY (`id_usuario`, `id_contacto_guardado`),
    FOREIGN KEY (`id_usuario`) REFERENCES `usuarios`(`id_usuario`),
    FOREIGN KEY (`id_contacto_guardado`) REFERENCES `usuarios`(`id_usuario`)
);

-- Creación de la tabla de sesiones
CREATE TABLE `sesiones` (
    `id_sesion` INT NOT NULL AUTO_INCREMENT,
    `id_usuario` INT NOT NULL,
    `token` VARCHAR(255) NOT NULL UNIQUE,
    `fecha_inicio` DATETIME DEFAULT CURRENT_TIMESTAMP,
    `fecha_expiracion` DATETIME,
    PRIMARY KEY (`id_sesion`),
    FOREIGN KEY (`id_usuario`) REFERENCES `usuarios`(`id_usuario`)
);

-- --------------------------------------------------------------------------------
-- 3. CREACIÓN DE PROCEDIMIENTOS ALMACENADOS
-- --------------------------------------------------------------------------------

-- sp_registrar_usuario_mysql
DELIMITER $$
CREATE PROCEDURE sp_registrar_usuario_mysql(
    IN p_nombre VARCHAR(25),
    IN p_apellido VARCHAR(25),
    IN p_correo VARCHAR(70),
    IN p_contrasena VARCHAR(25),
    IN p_telefono VARCHAR(20)
)
BEGIN
    DECLARE id_usuario_nuevo INT;
    DECLARE contrasena_encriptada BLOB;
    DECLARE correo_existente INT DEFAULT 0;
    DECLARE telefono_existente INT DEFAULT 0;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SELECT 0 AS `Success`, 'Error: No se pudo registrar el usuario. Se revirtió la transacción.' AS `Message`, -1 AS `UserID`;
    END;

    SELECT COUNT(*) INTO correo_existente FROM correos WHERE correo = p_correo;
    SELECT COUNT(*) INTO telefono_existente FROM telefonos WHERE telefono = p_telefono;

    IF correo_existente > 0 THEN
        SELECT 0 AS `Success`, 'El correo electrónico ya está registrado.' AS `Message`, -1 AS `UserID`;
    ELSEIF telefono_existente > 0 THEN
        SELECT 0 AS `Success`, 'El número de teléfono ya está registrado.' AS `Message`, -1 AS `UserID`;
    ELSE
        SET @llave_secreta = 'root123';
        SET contrasena_encriptada = AES_ENCRYPT(p_contrasena, @llave_secreta);

        START TRANSACTION;
            INSERT INTO usuarios (nombre, apellido, fecha_registro) VALUES (p_nombre, p_apellido, CURDATE());
            SET id_usuario_nuevo = LAST_INSERT_ID();
            INSERT INTO correos (id_usuario, correo, contrasenna) VALUES (id_usuario_nuevo, p_correo, contrasena_encriptada);
            INSERT INTO telefonos (id_usuario, telefono) VALUES (id_usuario_nuevo, p_telefono);
        COMMIT;
        
        SELECT 1 AS `Success`, 'Usuario registrado correctamente' AS `Message`, id_usuario_nuevo AS `UserID`;
    END IF;
END$$
DELIMITER ;

-- sp_validar_login_mysql
DELIMITER $$
CREATE PROCEDURE sp_validar_login_mysql(
    IN p_correo VARCHAR(70),
    IN p_contrasena VARCHAR(25)
)
BEGIN
    DECLARE v_id_usuario INT;
    DECLARE v_contrasena_desencriptada VARCHAR(25);
    SET @llave_secreta = 'root123';

    SELECT 
        u.id_usuario,
        CAST(AES_DECRYPT(c.contrasenna, @llave_secreta) AS CHAR(25))
    INTO 
        v_id_usuario, v_contrasena_desencriptada
    FROM usuarios u
    JOIN correos c ON u.id_usuario = c.id_usuario
    WHERE c.correo = p_correo
    LIMIT 1;

    IF (v_id_usuario IS NOT NULL AND v_contrasena_desencriptada = p_contrasena) THEN
        SELECT 1 AS `Success`, 'Login correcto' AS `Message`, v_id_usuario AS `UserID`;
    ELSE
        SELECT 0 AS `Success`, 'Correo o contraseña incorrectos' AS `Message`, -1 AS `UserID`;
    END IF;
END$$
DELIMITER ;

-- sp_enviar_mensaje_mysql
DELIMITER $$
CREATE PROCEDURE sp_enviar_mensaje_mysql(
    IN p_id_emisor INT,
    IN p_id_receptor INT,
    IN p_contenido_mensaje TEXT
)
BEGIN
    DECLARE contenido_encriptado BLOB;
    SET @llave_secreta = 'root123';
    SET contenido_encriptado = AES_ENCRYPT(p_contenido_mensaje, @llave_secreta);

    INSERT INTO mensajes (id_emisor, id_receptor, contenido, fecha_hora_envio)
    VALUES (p_id_emisor, p_id_receptor, contenido_encriptado, NOW());
    SELECT 1 AS `Success`, 'Mensaje enviado' AS `Message`;
END$$
DELIMITER ;

-- sp_obtener_mensajes_mysql
DELIMITER $$
CREATE PROCEDURE sp_obtener_mensajes_mysql(
    IN p_id_usuario1 INT,
    IN p_id_usuario2 INT
)
BEGIN
    SET @llave_secreta = 'root123';
    SELECT
        id_emisor,
        id_receptor,
        CAST(AES_DECRYPT(contenido, @llave_secreta) AS CHAR(10000)) AS contenido,
        fecha_hora_envio
    FROM mensajes
    WHERE (id_emisor = p_id_usuario1 AND id_receptor = p_id_usuario2)
       OR (id_emisor = p_id_usuario2 AND id_receptor = p_id_usuario1)
    ORDER BY fecha_hora_envio ASC;
END$$
DELIMITER ;

-- sp_crear_sesion_mysql
DELIMITER $$
CREATE PROCEDURE sp_crear_sesion_mysql(
    IN p_id_usuario INT,
    IN p_token VARCHAR(255),
    IN p_minutos_expiracion INT
)
BEGIN
    INSERT INTO sesiones (id_usuario, token, fecha_inicio, fecha_expiracion)
    VALUES (p_id_usuario, p_token, NOW(), DATE_ADD(NOW(), INTERVAL p_minutos_expiracion MINUTE));
    SELECT 1 AS `Success`, 'Sesión creada' AS `Message`;
END$$
DELIMITER ;

-- sp_validar_sesion_mysql
DELIMITER $$
CREATE PROCEDURE sp_validar_sesion_mysql(
    IN p_token VARCHAR(255)
)
BEGIN
    SELECT id_usuario FROM sesiones WHERE token = p_token AND fecha_expiracion > NOW();
END$$
DELIMITER ;

-- sp_cerrar_sesion_mysql
DELIMITER $$
CREATE PROCEDURE sp_cerrar_sesion_mysql(
    IN p_token VARCHAR(255)
)
BEGIN
    DELETE FROM sesiones WHERE token = p_token;
    SELECT 1 AS `Success`, 'Sesión cerrada' AS `Message`;
END$$
DELIMITER ;

-- sp_agregar_contacto_mysql
DELIMITER $$
CREATE PROCEDURE sp_agregar_contacto_mysql(
    IN p_id_usuario_actual INT,
    IN p_telefono_contacto VARCHAR(20)
)
BEGIN
    DECLARE v_id_contacto_a_guardar INT;
    SELECT id_usuario INTO v_id_contacto_a_guardar FROM telefonos WHERE telefono = p_telefono_contacto LIMIT 1;

    IF v_id_contacto_a_guardar IS NULL THEN
        SELECT 0 AS `Success`, 'No se encontró un usuario con ese teléfono.' AS `Message`;
    ELSEIF p_id_usuario_actual = v_id_contacto_a_guardar THEN
        SELECT 0 AS `Success`, 'No te puedes agregar a ti mismo como contacto.' AS `Message`;
    ELSE
        IF NOT EXISTS (SELECT 1 FROM contactos_guardados WHERE id_usuario = p_id_usuario_actual AND id_contacto_guardado = v_id_contacto_a_guardar) THEN
            INSERT INTO contactos_guardados (id_usuario, id_contacto_guardado) VALUES (p_id_usuario_actual, v_id_contacto_a_guardar);
            SELECT 1 AS `Success`, 'Contacto agregado correctamente.' AS `Message`;
        ELSE
            SELECT 0 AS `Success`, 'Este contacto ya existe en tu lista.' AS `Message`;
        END IF;
    END IF;
END$$
DELIMITER ;

-- sp_obtener_contactos_mysql
DELIMITER $$
CREATE PROCEDURE sp_obtener_contactos_mysql(
    IN p_id_usuario_actual INT
)
BEGIN
    SELECT
        u.id_usuario, u.nombre, u.apellido, t.telefono
    FROM contactos_guardados cg
    JOIN usuarios u ON cg.id_contacto_guardado = u.id_usuario
    LEFT JOIN telefonos t ON u.id_usuario = t.id_usuario
    WHERE cg.id_usuario = p_id_usuario_actual;
END$$
DELIMITER ;

